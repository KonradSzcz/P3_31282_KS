#include "mpi.h"
#include <cstdio>
#include <iostream>
#include <time.h>

void mainProcess(int size) {
    srand(time(NULL));
    const int elementsPerProcess = 10;

    //alokujemy wektory o rozmiarze(elementsPerProcess*(ilosc procesów-1))
    unsigned int* va = new unsigned int[elementsPerProcess * (size - 1)];
    unsigned int* vb = new unsigned int[elementsPerProcess * (size - 1)];
    unsigned int* vc = new unsigned int[elementsPerProcess * (size - 1)];

    //wypełniamy a i b losowymi danymi, a vc zerujemy
    for (unsigned int i = 0; i < elementsPerProcess * (size - 1); i++) {
        va[i] = rand() % 10;
        vb[i] = rand() % 10;
        vc[i] = 0;
    }

    //broadcastujemy wektor a do pozostałych procesów
    MPI_Bcast(va, elementsPerProcess * (size - 1), MPI_UNSIGNED, 0, MPI_COMM_WORLD);

    //broadcastujemy wektor b do pozostałych procesów
    MPI_Bcast(vb, elementsPerProcess * (size - 1), MPI_UNSIGNED, 0, MPI_COMM_WORLD);

    //odpalamy nasłuch
    MPI_Request* requests = new MPI_Request[size - 1];
    MPI_Status* statuses = new MPI_Status[size - 1];
    for (unsigned int i = 0; i < size - 1; i++) {
        MPI_Irecv(vc + i * elementsPerProcess, elementsPerProcess, MPI_UNSIGNED, i + 1, 0, MPI_COMM_WORLD, &requests[i]);
    }
    MPI_Waitall(size - 1, requests, statuses);

    //wypisujemy wyniki
    for (unsigned int i = 0; i < (elementsPerProcess * (size - 1)); i++) printf("%d\t", va[i]);
    printf("\r\n");
    for (unsigned int i = 0; i < (elementsPerProcess * (size - 1)); i++) printf("%d\t", vb[i]);
    printf("\r\n");
    for (unsigned int i = 0; i < (elementsPerProcess * (size - 1)); i++) printf("%d\t", vc[i]);
    printf("\r\n");

    //zwalniamy pamięć
    delete[] va;
    delete[] vb;
    delete[] vc;
    delete[] requests;
    delete[] statuses;
}

void workerProcess(int id, int size) {
    const int elementsPerProcess = 10;

    //alokujemy buffor na moją część zadania
    unsigned int* v = new unsigned int[elementsPerProcess];

    //alokujemny miejsce na wektor a oraz b
    unsigned int* va = new unsigned int[elementsPerProcess * (size - 1)];
    unsigned int* vb = new unsigned int[elementsPerProcess * (size - 1)];

    //nasłuchujemy bcasta wektora a
    MPI_Bcast(va, elementsPerProcess * (size - 1), MPI_UNSIGNED, 0, MPI_COMM_WORLD);

    //nasłuchujemy bcasta wektora b
    MPI_Bcast(vb, elementsPerProcess * (size - 1), MPI_UNSIGNED, 0, MPI_COMM_WORLD);

    //liczymy sumę
    for (unsigned int i = 0; i < elementsPerProcess; i++) {
        v[i] = va[(id - 1) * elementsPerProcess + i] + vb[(id - 1) * elementsPerProcess + i];
    }

    //odsyłamy wynik
    MPI_Send(v, elementsPerProcess, MPI_UNSIGNED, 0, 0, MPI_COMM_WORLD);

    //zwalniamy pamięć
    delete[] v;
    delete[] va;
    delete[] vb;
}

int main()
{
    int PID, PCOUNT;

    MPI_Init(NULL, NULL);

    MPI_Comm_rank(MPI_COMM_WORLD, &PID);
    MPI_Comm_size(MPI_COMM_WORLD, &PCOUNT);

    if (PID == 0) { //jestem procesem głównym
        mainProcess(PCOUNT);
    }
    else { //jestem procesem roboczym
        workerProcess(PID, PCOUNT);
    }

    MPI_Finalize();

    return 0;
}
